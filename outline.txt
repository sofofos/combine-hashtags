CASE 1:
# Use regex to match the json data and write it into a file for easier reading
# CLI: search_script $hashtag1 $hashtag2
  - search keywords hardcoded for now based on downloaded files
  - as such, FIle.open($hashtag1), read and JSON.parse
  - search every caption for text containing $hashtag2
  - for each result, instantiate a Post object with parameters: url, caption
    JSON.entry_data.TagPage[0].data.recent.sections[3].layout_content.medias[0].media.caption

CASE 2:

Write a gem based on querying the basic API (ie own profile)
As a user I can...
  search for my posts containing a combination of hashtags
  see what hashtags I use most
  get suggestions for hashtags that appear with other hashtags
  get a link to each post matching my search

TODO's:
  - Store API credentials securely and set as environment variables - DONE
  - Write bash/zsh script for setting env vars by user?  - DONE
  - Write the Post class w/ attributes img_url, post_url, caption, tags - DONE
  - Refactor the query script properly (env vars + get next pagination) - DONE

  - Write the interface (CLI first, UI after) - TBRefx from tester.rb 
    - Possibly split into view/controller/router classes - DONE.. needs polishing tho
  
  - Add methods to Post class for extracting tags, sorting, counting, etc.. DONE: [extract, tally, popular] 
    - FOLLOW: sort + others? - DONE... sorting moved to controller

  - Write the search_hashtags methods (figure out where to put them... interface? profile?) - DONE... controller + router
    - search query contains: #tagA #tagB - DONE
    - search all posts containing #tagA , then select containing #tagB - DONE
    - add 3rd tag option search cause shit is cooler with Elsa's data now 
    - or add feature to preview associated hashtags from first query? ie "these are found with your search"
  
  - Check if query.rb should have further encapsulation (class? module? controller class?) - TBRefx: query still separate from overall process
    - Maybe a further version should avoid writing and reading files, and instead instantiate Profile directly from query methods? 
  
  - CLI barebones is done. Forget about nested menus here. Next:
    - UI: Get a mini frontend w/ bootstrap and smol rails app going
      - Grid to display posts as cards: thumbnail preview, caption + post permalink
    - Nested menu translates better here with navigation + links betw/ views
